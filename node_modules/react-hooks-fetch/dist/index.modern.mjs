import{createElement as r,useState as e,useCallback as t}from"react";import{createContext as n,useContextSelector as i,useContextUpdate as o}from"use-context-selector";const s=(r,e)=>{const t={input:e};return t.promise=new Promise((n,i)=>{r(e).then(r=>{t.result=r,n()}).catch(r=>{t.error=r,i(r)}).finally(()=>{delete t.promise})}),t},u=n(null),l=({initialInputs:t,children:n})=>r(u.Provider,{value:e(()=>{const r=new Map;if(t)for(const[e,n]of t)r.set(e,s(e,n));return r})},n);function c(r){const e=(r=>{const e=o(u),n=i(u,r=>r?r[1]:"NO_PROVIDER");if("NO_PROVIDER"===n)throw new Error("missing Provider");return t(t=>{e(()=>{n(e=>new Map(e).set(r,t))},{suspense:!0})},[e,n,r])})(r);return t(t=>{e(s(r,t))},[e,r])}function p(r,e){let t=(r=>{const e=i(u,e=>e?e[0].get(r):"NO_PROVIDER");if("NO_PROVIDER"===e)throw new Error("missing Provider");return e})(r);if(!t&&null!=e&&e.allowUndefined&&(t={input:void 0}),!t)throw new Error("missing initial input");if("promise"in t)throw t.promise;if("error"in t)throw t.error;return{input:t.input,result:t.result,refetch:c(r)}}export{l as FetchProvider,p as useFetch,c as useRefetch};
//# sourceMappingURL=index.modern.js.map
