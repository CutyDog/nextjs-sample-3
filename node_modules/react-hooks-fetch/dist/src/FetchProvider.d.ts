import { Dispatch, ReactNode, SetStateAction } from 'react';
export declare type FetchFunc<Input, Result> = (input: Input) => Promise<Result>;
export declare type FetchState<Input, Result> = {
    input: Input;
    result?: Result;
    error?: unknown;
    promise?: Promise<void>;
};
export declare const createFetchState: <Input, Result>(fn: FetchFunc<Input, Result>, input: Input) => FetchState<Input, Result>;
declare type FetchMap = Map<FetchFunc<any, any>, FetchState<any, any>>;
declare type MapState = readonly [
    FetchMap,
    Dispatch<SetStateAction<FetchMap>>
];
declare type FetchProviderProps = {
    initialInputs?: Iterable<readonly [FetchFunc<any, any>, any]>;
    children: ReactNode;
};
/**
 * FetchProvider component
 *
 * Put this component higher in the component tree.
 *
 * @example
 * import { FetchProvider } from 'react-hooks-fetch';
 *
 * const App = () => (
 *   <FetchProvider initialInputs={[[fn, input]]}>
 *     ...
 *   </FetchProvider>
 * );
 */
export declare const FetchProvider: ({ initialInputs, children }: FetchProviderProps) => import("react").ReactElement<{
    value: MapState;
}, string | import("react").JSXElementConstructor<any>>;
export declare const useFetchState: <Input, Result>(fn: FetchFunc<Input, Result>) => FetchState<Input, Result> | undefined;
export declare const useSetFetchState: <Input, Result>(fn: FetchFunc<Input, Result>) => (nextState: FetchState<Input, Result>) => void;
export {};
